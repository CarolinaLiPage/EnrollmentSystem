Mon Mar 13 03:22:09 UTC 2023
Linux LinuxMachine 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
Done.
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
49170 warnings generated.
86455 warnings generated.
135980 warnings generated.
178477 warnings generated.
229837 warnings generated.
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:10:16: error: 2 adjacent parameters of 'Course' of similar type ('std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
Course::Course(string &number, string &name) : number{number}, name{name} {}
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:10:24: note: the first parameter in the range is 'number'
Course::Course(string &number, string &name) : number{number}, name{name} {}
                       ^~~~~~
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:10:40: note: the last parameter in the range is 'name'
Course::Course(string &number, string &name) : number{number}, name{name} {}
                                       ^~~~
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:36:8: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  for (auto student = studentsByLastName.begin();
       ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:36:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (auto student = studentsByLastName.begin();
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:55:8: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  for (auto student = studentsByID.begin(); student != studentsByID.end();
       ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:37:8: error: backward branch (for loop) is ID-dependent due to variable reference to 'student' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
       student != studentsByLastName.end(); student++) {
       ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:55:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (auto student = studentsByID.begin(); student != studentsByID.end();
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:55:45: error: backward branch (for loop) is ID-dependent due to variable reference to 'student' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  for (auto student = studentsByID.begin(); student != studentsByID.end();
                                            ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/enrollmentsystem.cpp:10:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (auto &university : universities) {
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/enrollmentsystem.cpp:16:51: error: the const qualified parameter 'name' is copied for each invocation; consider making it a reference [performance-unnecessary-value-param,-warnings-as-errors]
bool EnrollmentSystem::addUniversity(const string name) {
                                                  ^
                                                 &
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/enrollmentsystem.h:10:7: error: class 'EnrollmentSystem' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions,-warnings-as-errors]
class EnrollmentSystem {
      ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/main.cpp:10:20: error: variable name 'es' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  EnrollmentSystem es;
                   ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/main.cpp:32:3: error: variable 'c342byLastName' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness,-warnings-as-errors]
  string c342byLastName =
  ^
         const 
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/main.cpp:37:3: error: variable 'c342byID' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness,-warnings-as-errors]
  string c342byID =
  ^
         const 
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:8:34: error: 2 adjacent parameters of 'Student' of similar type ('std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
Student::Student(int &studentID, string &firstName, string &lastName)
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:8:42: note: the first parameter in the range is 'firstName'
Student::Student(int &studentID, string &firstName, string &lastName)
                                         ^~~~~~~~~
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:8:61: note: the last parameter in the range is 'lastName'
Student::Student(int &studentID, string &firstName, string &lastName)
                                                            ^~~~~~~~
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:37:8: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  for (auto course = enrolledCourses.begin(); course != enrolledCourses.end();
       ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:37:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (auto course = enrolledCourses.begin(); course != enrolledCourses.end();
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:62:8: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  for (auto course = student.enrolledCourses.begin();
       ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:37:47: error: backward branch (for loop) is ID-dependent due to variable reference to 'course' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  for (auto course = enrolledCourses.begin(); course != enrolledCourses.end();
                                              ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:62:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (auto course = student.enrolledCourses.begin();
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:63:8: error: backward branch (for loop) is ID-dependent due to variable reference to 'course' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
       course != student.enrolledCourses.end(); course++) {
       ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:14:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (auto &student : students) {
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:17:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (auto &course : courses) {
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:25:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  ifstream input(filename);
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:32:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  while (input >> studentID >> firstName >> lastName) {
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:44:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  ifstream input(filename);
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:32:10: error: backward branch (while loop) is ID-dependent due to variable reference to 'input' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  while (input >> studentID >> firstName >> lastName) {
         ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:51:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  while (input >> courseNumber) {
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:67:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  ifstream input(filename);
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:51:10: error: backward branch (while loop) is ID-dependent due to variable reference to 'input' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  while (input >> courseNumber) {
         ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:73:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  while (input >> studentID >> course) {
  ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:73:10: error: backward branch (while loop) is ID-dependent due to variable reference to 'input' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  while (input >> studentID >> course) {
         ^
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.h:12:7: error: class 'University' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions,-warnings-as-errors]
class University {
      ^
Suppressed 229804 warnings (229804 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
25 warnings treated as errors
Resource filename: /usr/local/lib64/python3.6/site-packages/clang_tidy/data/bin/clang-tidy 
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./course.cpp
Running clang-format on ./enrollmentsystem.cpp
Running clang-format on ./main.cpp
Running clang-format on ./student.cpp
Running clang-format on ./university.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
==25599== Memcheck, a memory error detector
==25599== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==25599== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==25599== Command: ./a.out
==25599== Parent PID: 24840
==25599== 
==25599== 
==25599== HEAP SUMMARY:
==25599==     in use at exit: 0 bytes in 0 blocks
==25599==   total heap usage: 1,991 allocs, 1,991 frees, 237,201 bytes allocated
==25599== 
==25599== All heap blocks were freed -- no leaks are possible
==25599== 
==25599== For lists of detected and suppressed errors, rerun with: -s
==25599== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
File '/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp':
Name                                                                                                                                                                                 Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Course::Course(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)         1       0 100.00%         1       0 100.00%         0       0   0.00%
Course::addStudent(Student*)                                                                                                                                                               4       0 100.00%         8       0 100.00%         2       0 100.00%
Course::removeStudent(int)                                                                                                                                                                 4       1  75.00%         9       2  77.78%         2       1  50.00%
Course::getClassListByLastName[abi:cxx11]()                                                                                                                                                7       0 100.00%        17       0 100.00%         4       0 100.00%
Course::getClassListByID[abi:cxx11]()                                                                                                                                                      7       0 100.00%        17       0 100.00%         4       0 100.00%
Course::getNumber[abi:cxx11]() const                                                                                                                                                       1       0 100.00%         1       0 100.00%         0       0   0.00%
Course::getName[abi:cxx11]() const                                                                                                                                                         1       1   0.00%         1       1   0.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                     25       2  92.00%        54       3  94.44%        12       1  91.67%

File '/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/enrollmentsystem.cpp':
Name                                                                                                                                                                                 Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EnrollmentSystem::~EnrollmentSystem()                                                                                                                                                      2       0 100.00%         5       0 100.00%         2       0 100.00%
EnrollmentSystem::addUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)                                                                           4       0 100.00%         7       0 100.00%         2       0 100.00%
EnrollmentSystem::setCurrentUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                             4       0 100.00%         8       0 100.00%         2       0 100.00%
EnrollmentSystem::getUniversityName[abi:cxx11]() const                                                                                                                                     4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                            4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                             4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                               4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                            4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                             4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                            4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::getEnrolledCourses[abi:cxx11](int const&) const                                                                                                                          4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                             4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::getClassListByLastName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                           4       1  75.00%         6       2  66.67%         2       1  50.00%
EnrollmentSystem::getClassListByID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                 4       1  75.00%         6       2  66.67%         2       1  50.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                     54      11  79.63%        86      22  74.42%        28      11  60.71%

File '/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/main.cpp':
Name                                                                                                                                                                                 Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test1()                                                                                                                                                                                    1       0 100.00%        31      18  41.94%         0       0   0.00%
main                                                                                                                                                                                       1       0 100.00%         4       0 100.00%         0       0   0.00%
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                      2       0 100.00%        35      18  48.57%         0       0   0.00%

File '/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp':
Name                                                                                                                                                                                         Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Student::Student(int&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)         1       0 100.00%         1       0 100.00%         0       0   0.00%
Student::dropCourse(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                        4       1  75.00%         7       2  71.43%         2       1  50.00%
Student::addCourse(Course*)                                                                                                                                                                        4       0 100.00%         7       0 100.00%         2       0 100.00%
Student::isInCourse(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                  1       0 100.00%         3       0 100.00%         0       0   0.00%
Student::getEnrolledCourses[abi:cxx11]()                                                                                                                                                           7       0 100.00%        13       0 100.00%         4       0 100.00%
Student::getID() const                                                                                                                                                                             1       0 100.00%         1       0 100.00%         0       0   0.00%
Student::getFirstName[abi:cxx11]() const                                                                                                                                                           1       0 100.00%         1       0 100.00%         0       0   0.00%
Student::getLastName[abi:cxx11]() const                                                                                                                                                            1       0 100.00%         1       0 100.00%         0       0   0.00%
operator<<(std::ostream&, Student const&)                                                                                                                                                          7       7   0.00%        13      13   0.00%         4       4   0.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                             27       8  70.37%        47      15  68.09%        12       5  58.33%

File '/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp':
Name                                                                                                                                                                                         Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
University::University(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)                                                                                            1       0 100.00%         1       0 100.00%         0       0   0.00%
University::~University()                                                                                                                                                                          3       0 100.00%         8       0 100.00%         4       0 100.00%
University::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                8       1  87.50%        16       2  87.50%         6       1  83.33%
University::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                10       1  90.00%        20       2  90.00%         8       2  75.00%
University::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                             6       1  83.33%        13       2  84.62%         4       1  75.00%
University::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                 6       0 100.00%        11       0 100.00%         6       0 100.00%
University::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                6       1  83.33%        11       2  81.82%         6       3  50.00%
University::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                6       1  83.33%         8       2  75.00%         6       3  50.00%
University::getEnrolledCourses[abi:cxx11](int const&)                                                                                                                                              4       1  75.00%         7       2  71.43%         2       1  50.00%
University::getClassListByLastName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                         1       0 100.00%         3       0 100.00%         0       0   0.00%
University::getClassListByID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                               1       0 100.00%         3       0 100.00%         0       0   0.00%
University::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                 4       1  75.00%         7       2  71.43%         2       1  50.00%
University::getUniversityName[abi:cxx11]() const                                                                                                                                                   1       0 100.00%         1       0 100.00%         0       0   0.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                             57       7  87.72%       109      14  87.16%        44      12  72.73%
/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/course.cpp:
    1|       |#include "course.h"
    2|       |#include "student.h"
    3|       |#include <algorithm>
    4|       |#include <cassert>
    5|       |#include <sstream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// Constructor course number and course name
   10|     77|Course::Course(string &number, string &name) : number{number}, name{name} {}
   11|       |
   12|       |// Add given student to the course, return true if successful
   13|    448|bool Course::addStudent(Student *student) {
   14|    448|  if (studentsByID.find(student->getID()) == studentsByID.end()) {
   15|    443|    studentsByID.insert({student->getID(), student});
   16|    443|    studentsByLastName.insert({student->getLastName(), student});
   17|    443|    return true;
   18|    443|  }
   19|      5|  return false;
   20|    448|}
   21|       |
   22|       |// Removes given student from course, return true if successful
   23|      1|bool Course::removeStudent(int studentID) {
   24|      1|  if (studentsByID.find(studentID) == studentsByID.end()) {
   25|      0|    return false;
   26|      0|  }
   27|      1|  const string studentLastName = studentsByID[studentID]->getLastName();
   28|      1|  studentsByID.erase(studentID);
   29|      1|  studentsByLastName.erase(studentLastName);
   30|      1|  return true;
   31|      1|}
   32|       |
   33|       |// Return class list sorted by last name of students
   34|      1|string Course::getClassListByLastName() {
   35|      1|  string students = "[";
   36|      1|  for (auto student = studentsByLastName.begin();
   37|      8|       student != studentsByLastName.end(); student++) {
   38|      7|    if (next(student) == studentsByLastName.end()) {
   39|      1|      students += student->second->getLastName() + ", " +
   40|      1|                  student->second->getFirstName() + " (" +
   41|      1|                  to_string(student->second->getID()) + ")";
   42|      6|    } else {
   43|      6|      students += student->second->getLastName() + ", " +
   44|      6|                  student->second->getFirstName() + " (" +
   45|      6|                  to_string(student->second->getID()) + "), ";
   46|      6|    }
   47|      7|  }
   48|      1|  students += "]";
   49|      1|  return students;
   50|      1|}
   51|       |
   52|       |// Return class list sorted by id of students
   53|      1|string Course::getClassListByID() {
   54|      1|  string students = "[";
   55|      8|  for (auto student = studentsByID.begin(); student != studentsByID.end();
   56|      7|       student++) {
   57|      7|    if (next(student) == studentsByID.end()) {
   58|      1|      students += student->second->getLastName() + ", " +
   59|      1|                  student->second->getFirstName() + " (" +
   60|      1|                  to_string(student->second->getID()) + ")";
   61|      6|    } else {
   62|      6|      students += student->second->getLastName() + ", " +
   63|      6|                  student->second->getFirstName() + " (" +
   64|      6|                  to_string(student->second->getID()) + "), ";
   65|      6|    }
   66|      7|  }
   67|      1|  students += "]";
   68|      1|  return students;
   69|      1|}
   70|       |
   71|       |// Gets course number
   72|    891|string Course::getNumber() const { return number; }
   73|       |
   74|       |// Gets course name
   75|      0|string Course::getName() const { return name; }

/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/enrollmentsystem.cpp:
    1|       |#include "enrollmentsystem.h"
    2|       |#include "university.h"
    3|       |#include <cassert>
    4|       |#include <cctype>
    5|       |#include <unordered_map>
    6|       |
    7|       |using namespace std;
    8|       |
    9|      1|EnrollmentSystem::~EnrollmentSystem() {
   10|      3|  for (auto &university : universities) {
   11|      3|    delete university.second;
   12|      3|  }
   13|      1|}
   14|       |
   15|       |// Add university to the enrollments system
   16|      4|bool EnrollmentSystem::addUniversity(const string name) {
   17|      4|  if (universities.find(name) == universities.end()) {
   18|      3|    universities.insert({name, new University(name)});
   19|      3|    return true;
   20|      3|  }
   21|      1|  return false;
   22|      4|}
   23|       |
   24|       |// Set this university as the active university for other functions
   25|      2|bool EnrollmentSystem::setCurrentUniversity(const string &name) {
   26|      2|  auto itr = universities.find(name);
   27|      2|  if (itr == universities.end()) {
   28|      1|    return false;
   29|      1|  }
   30|      1|  currentUniversity = itr->second;
   31|      1|  return true;
   32|      2|}
   33|       |
   34|       |// Return the current active university name
   35|      1|string EnrollmentSystem::getUniversityName() const {
   36|      1|  if (currentUniversity == nullptr) {
   37|      0|    return "";
   38|      0|  }
   39|      1|  return currentUniversity->getUniversityName();
   40|      1|}
   41|       |
   42|       |// Read the student list for current active university
   43|       |// return true if file successfully read
   44|      1|bool EnrollmentSystem::readStudentList(const string &filename) const {
   45|      1|  if (currentUniversity == nullptr) {
   46|      0|    return false;
   47|      0|  }
   48|      1|  return currentUniversity->readStudentList(filename);
   49|      1|}
   50|       |
   51|       |// Read the course list for current active university
   52|       |// return true if file successfully read
   53|      1|bool EnrollmentSystem::readCourseList(const string &filename) const {
   54|      1|  if (currentUniversity == nullptr) {
   55|      0|    return false;
   56|      0|  }
   57|      1|  return currentUniversity->readCourseList(filename);
   58|      1|}
   59|       |
   60|       |// Read the student enrollment information for current active university
   61|       |// return true if file successfully read
   62|      1|bool EnrollmentSystem::readEnrollmentInfo(const string &filename) {
   63|      1|  if (currentUniversity == nullptr) {
   64|      0|    return false;
   65|      0|  }
   66|      1|  return currentUniversity->readEnrollmentInfo(filename);
   67|      1|}
   68|       |
   69|       |// Drop student from given course, return true if successful
   70|       |bool EnrollmentSystem::dropCourse(int studentID,
   71|      1|                                  const string &courseNumber) const {
   72|      1|  if (currentUniversity == nullptr) {
   73|      0|    return false;
   74|      0|  }
   75|      1|  return currentUniversity->dropCourse(studentID, courseNumber);
   76|      1|}
   77|       |
   78|       |// Add student to the given course, return true if successful
   79|       |bool EnrollmentSystem::addCourse(int studentID,
   80|      3|                                 const string &courseNumber) const {
   81|      3|  if (currentUniversity == nullptr) {
   82|      0|    return false;
   83|      0|  }
   84|      3|  return currentUniversity->addCourse(studentID, courseNumber);
   85|      3|}
   86|       |
   87|       |// Return true if student is in the given course
   88|       |bool EnrollmentSystem::isInCourse(int studentID,
   89|      1|                                  const string &courseNumber) const {
   90|      1|  if (currentUniversity == nullptr) {
   91|      0|    return false;
   92|      0|  }
   93|      1|  return currentUniversity->isInCourse(studentID, courseNumber);
   94|      1|}
   95|       |
   96|       |// Return the courses student is enrolled in
   97|       |// The returned courses are separated by commas and sorted by course name
   98|      1|string EnrollmentSystem::getEnrolledCourses(const int &studentID) const {
   99|      1|  if (currentUniversity == nullptr) {
  100|      0|    return "";
  101|      0|  }
  102|      1|  return currentUniversity->getEnrolledCourses(studentID);
  103|      1|}
  104|       |
  105|       |// Return the title for the course
  106|      1|string EnrollmentSystem::getCourseTitle(const string &courseNumber) const {
  107|      1|  if (currentUniversity == nullptr) {
  108|      0|    return "";
  109|      0|  }
  110|      1|  return currentUniversity->getCourseTitle(courseNumber);
  111|      1|}
  112|       |
  113|       |// Return class list sorted by last name of students
  114|      1|string EnrollmentSystem::getClassListByLastName(const string &courseNumber) {
  115|      1|  if (currentUniversity == nullptr) {
  116|      0|    return "";
  117|      0|  }
  118|      1|  return currentUniversity->getClassListByLastName(courseNumber);
  119|      1|}
  120|       |
  121|       |// Return class list sorted by id of students
  122|      1|string EnrollmentSystem::getClassListByID(const string &courseNumber) {
  123|      1|  if (currentUniversity == nullptr) {
  124|      0|    return "";
  125|      0|  }
  126|      1|  return currentUniversity->getClassListByID(courseNumber);
  127|      1|}

/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/enrollmentsystem.h:
    1|       |#ifndef ENROLLMENTSYSTEM_H
    2|       |#define ENROLLMENTSYSTEM_H
    3|       |
    4|       |#include "university.h"
    5|       |#include <string>
    6|       |#include <unordered_map>
    7|       |
    8|       |using namespace std;
    9|       |
   10|       |class EnrollmentSystem {
   11|       |
   12|       |public:
   13|       |  // Default constructor
   14|      1|  EnrollmentSystem() = default;
   15|       |
   16|       |  // EnrollmentSystem(EnrollmentSystem &enrollmentSystem);
   17|       |
   18|       |  ~EnrollmentSystem();
   19|       |  // Add university to the enrollments system
   20|       |  bool addUniversity(string name);
   21|       |
   22|       |  // Set this university as the active university for other functions
   23|       |  bool setCurrentUniversity(const string &name);
   24|       |
   25|       |  // Return the current active university name
   26|       |  string getUniversityName() const;
   27|       |
   28|       |  // Read the student list for current active university
   29|       |  // return true if file successfully read
   30|       |  bool readStudentList(const string &filename) const;
   31|       |
   32|       |  // Read the course list for current active university
   33|       |  // return true if file successfully read
   34|       |  bool readCourseList(const string &filename) const;
   35|       |
   36|       |  // Read the student enrollment information for current active university
   37|       |  // return true if file successfully read
   38|       |  bool readEnrollmentInfo(const string &filename);
   39|       |
   40|       |  // Drop student from given course, return true if successful
   41|       |  bool dropCourse(int studentID, const string &courseNumber) const;
   42|       |
   43|       |  // Add student to the given course, return true if successful
   44|       |  bool addCourse(int studentID, const string &courseNumber) const;
   45|       |
   46|       |  // Return true if student is in the given course
   47|       |  bool isInCourse(int studentID, const string &courseNumber) const;
   48|       |
   49|       |  // Return the courses student is enrolled in
   50|       |  // The returned courses are separated by commas and sorted by course name
   51|       |  string getEnrolledCourses(const int &studentID) const;
   52|       |
   53|       |  // Return the title for the course
   54|       |  string getCourseTitle(const string &courseNumber) const;
   55|       |
   56|       |  // Return class list sorted by last name of students
   57|       |  string getClassListByLastName(const string &courseNumber);
   58|       |
   59|       |  // Return class list sorted by id of students
   60|       |  string getClassListByID(const string &courseNumber);
   61|       |
   62|       |private:
   63|       |  // current active university
   64|       |  University *currentUniversity = nullptr;
   65|       |
   66|       |  // Store of known universities
   67|       |  unordered_map<string, University *> universities;
   68|       |};
   69|       |
   70|       |#endif

/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/main.cpp:
    1|       |#include "enrollmentsystem.h"
    2|       |#include <cassert>
    3|       |#include <iostream>
    4|       |#include <sstream>
    5|       |
    6|       |using namespace std;
    7|       |
    8|       |// check enrollment system
    9|      1|void test1() {
   10|      1|  EnrollmentSystem es;
   11|      1|  assert(es.addUniversity("UWB"));
   12|      0|  assert(!es.addUniversity("UWB"));
   13|      0|  assert(es.addUniversity("UW Seattle"));
   14|      0|  assert(es.addUniversity("UW Tacoma"));
   15|      0|  assert(!es.setCurrentUniversity("UWx"));
   16|      0|  assert(es.setCurrentUniversity("UWB"));
   17|      0|  assert(es.getUniversityName() == "UWB");
   18|       |  // read data
   19|      0|  assert(es.readCourseList("data-courses.txt"));
   20|      0|  assert(es.readStudentList("data-students.txt"));
   21|      0|  assert(es.readEnrollmentInfo("data-enrollments.txt"));
   22|       |  // check courses
   23|      0|  assert(!es.addCourse(999, "CSS342"));
   24|      0|  assert(!es.addCourse(1070, "CSS3422"));
   25|      0|  assert(!es.isInCourse(1070, "CSS342"));
   26|      0|  assert(es.addCourse(1070, "CSS342"));
   27|      0|  assert(es.dropCourse(1070, "CSS343"));
   28|      0|  assert(es.getCourseTitle("CSS342") ==
   29|      1|         "Data Structures, Algorithms, and Discrete Mathematics I");
   30|       |  // check enrollments
   31|      0|  assert(es.getEnrolledCourses(1070) == "[CSS110, CSS173, CSS342]");
   32|      0|  string c342byLastName =
   33|      1|      "[Collins, Cassandra (1070), Evans, Juan (1401), Gonzalez, Holly (1223), "
   34|      1|      "Henderson, Daniel (1364), Taylor, Alexander (1986), Thompson, Christine "
   35|      1|      "(1386), Watson, Alex (1211)]";
   36|      1|  assert(es.getClassListByLastName("CSS342") == c342byLastName);
   37|      0|  string c342byID =
   38|      1|      "[Collins, Cassandra (1070), Watson, Alex (1211), Gonzalez, Holly "
   39|      1|      "(1223), Henderson, Daniel (1364), Thompson, Christine (1386), Evans, "
   40|      1|      "Juan (1401), Taylor, Alexander (1986)]";
   41|      1|  assert(es.getClassListByID("CSS342") == c342byID);
   42|      1|}
   43|       |
   44|       |// run all tests
   45|      1|int main() {
   46|      1|  test1();
   47|       |
   48|      1|  cout << "Done." << endl;
   49|      1|}

/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/student.cpp:
    1|       |#include "student.h"
    2|       |#include "course.h"
    3|       |#include <sstream>
    4|       |
    5|       |using namespace std;
    6|       |
    7|       |// Constructor with student ID, first name, and last name
    8|       |Student::Student(int &studentID, string &firstName, string &lastName)
    9|    137|    : firstName{firstName}, lastName{lastName}, studentID{studentID} {}
   10|       |
   11|       |// Drop student from given course, return true if successful
   12|      1|bool Student::dropCourse(const string &courseNumber) {
   13|      1|  if (enrolledCourses.find(courseNumber) == enrolledCourses.end()) {
   14|      0|    return false;
   15|      0|  }
   16|      1|  enrolledCourses.erase(courseNumber);
   17|      1|  return true;
   18|      1|}
   19|       |
   20|       |// Add student to the given course, return true if successful
   21|    448|bool Student::addCourse(Course *course) {
   22|    448|  if (enrolledCourses.find(course->getNumber()) == enrolledCourses.end()) {
   23|    443|    enrolledCourses.insert({course->getNumber(), course});
   24|    443|    return true;
   25|    443|  }
   26|      5|  return false;
   27|    448|}
   28|       |
   29|       |// Return true if student is in the given course
   30|      1|bool Student::isInCourse(const string &courseNumber) const {
   31|      1|  return (enrolledCourses.find(courseNumber) != enrolledCourses.end());
   32|      1|}
   33|       |
   34|       |// Returns a string of all courses student is enrolled in
   35|      1|string Student::getEnrolledCourses() {
   36|      1|  string enrolled = "[";
   37|      4|  for (auto course = enrolledCourses.begin(); course != enrolledCourses.end();
   38|      3|       course++) {
   39|      3|    if (next(course) == enrolledCourses.end()) {
   40|      1|      enrolled += course->first;
   41|      2|    } else {
   42|      2|      enrolled += course->first + ", ";
   43|      2|    }
   44|      3|  }
   45|      1|  enrolled += "]";
   46|      1|  return enrolled;
   47|      1|}
   48|       |
   49|       |// Gets student ID
   50|    905|int Student::getID() const { return studentID; }
   51|       |
   52|       |// Gets student first name
   53|     14|string Student::getFirstName() const { return firstName; }
   54|       |
   55|       |// Gets student last name
   56|    458|string Student::getLastName() const { return lastName; }
   57|       |
   58|       |// Operator overload for <<
   59|       |// Prints all courses student is enrolled in
   60|      0|ostream &operator<<(ostream &out, const Student &student) {
   61|      0|  out << "[";
   62|      0|  for (auto course = student.enrolledCourses.begin();
   63|      0|       course != student.enrolledCourses.end(); course++) {
   64|      0|    if (next(course) == student.enrolledCourses.end()) {
   65|      0|      out << course->first;
   66|      0|    } else {
   67|      0|      out << course->first + ", ";
   68|      0|    }
   69|      0|  }
   70|      0|  out << "]";
   71|      0|  return out;
   72|      0|}

/home/cssuwbstudent/stevenpl/UWBCSS342Project5Group/university.cpp:
    1|       |#include "university.h"
    2|       |#include "student.h"
    3|       |#include <cassert>
    4|       |#include <fstream>
    5|       |#include <iostream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// Constructor with university name
   10|      3|University::University(string name) : name{std::move(name)} {}
   11|       |
   12|       |// Destructor
   13|      3|University::~University() {
   14|    137|  for (auto &student : students) {
   15|    137|    delete student.second;
   16|    137|  }
   17|     77|  for (auto &course : courses) {
   18|     77|    delete course.second;
   19|     77|  }
   20|      3|}
   21|       |
   22|       |// Read the student list for current active university
   23|       |// return true if file successfully read
   24|      1|bool University::readStudentList(const string &filename) {
   25|      1|  ifstream input(filename);
   26|      1|  if (!input.is_open()) {
   27|      0|    return false;
   28|      0|  }
   29|      1|  int studentID = 0;
   30|      1|  string firstName;
   31|      1|  string lastName;
   32|    151|  while (input >> studentID >> firstName >> lastName) {
   33|    150|    if (students.find(studentID) == students.end()) {
   34|    137|      students.insert({studentID, new Student(studentID, firstName, lastName)});
   35|    137|    }
   36|    150|  }
   37|      1|  input.close();
   38|      1|  return true;
   39|      1|}
   40|       |
   41|       |// Read the course list for current active university
   42|       |// return true if file successfully read
   43|      1|bool University::readCourseList(const string &filename) {
   44|      1|  ifstream input(filename);
   45|      1|  if (!input.is_open()) {
   46|      0|    return false;
   47|      0|  }
   48|      1|  string courseNumber;
   49|      1|  string courseName;
   50|      1|  courseName.erase(courseName.begin(), courseName.end());
   51|     80|  while (input >> courseNumber) {
   52|     79|    getline(input, courseName);
   53|     79|    if (courseName[0] == ' ') {
   54|     79|      courseName = courseName.substr(1, courseName.length() - 1);
   55|     79|    }
   56|     79|    if (courses.find(courseNumber) == courses.end()) {
   57|     77|      courses.insert({courseNumber, new Course(courseNumber, courseName)});
   58|     77|    }
   59|     79|  }
   60|      1|  input.close();
   61|      1|  return true;
   62|      1|}
   63|       |
   64|       |// Read the student enrollment information for current active university
   65|       |// return true if file successfully read
   66|      1|bool University::readEnrollmentInfo(const string &filename) {
   67|      1|  ifstream input(filename);
   68|      1|  if (!input.is_open()) {
   69|      0|    return false;
   70|      0|  }
   71|      1|  int studentID = 0;
   72|      1|  string course;
   73|    451|  while (input >> studentID >> course) {
   74|    450|    addCourse(studentID, course);
   75|    450|  }
   76|      1|  input.close();
   77|      1|  return true;
   78|      1|}
   79|       |
   80|       |// Add student to the given course, return true if successful
   81|    453|bool University::addCourse(int studentID, const string &courseNumber) {
   82|    453|  if ((students.find(studentID) == students.end()) ||
   83|    453|      (courses.find(courseNumber) == courses.end())) {
   84|      5|    return false;
   85|      5|  }
   86|    448|  Student *currStudent = students[studentID];
   87|    448|  Course *currCourse = courses[courseNumber];
   88|    448|  currStudent->addCourse(currCourse);
   89|    448|  currCourse->addStudent(currStudent);
   90|    448|  return true;
   91|    453|}
   92|       |
   93|       |// Drop student from given course, return true if successful
   94|      1|bool University::dropCourse(int studentID, const string &courseNumber) {
   95|      1|  if ((students.find(studentID) == students.end()) ||
   96|      1|      (courses.find(courseNumber) == courses.end())) {
   97|      0|    return false;
   98|      0|  }
   99|      1|  Student *currStudent = students[studentID];
  100|      1|  currStudent->dropCourse(courseNumber);
  101|      1|  Course *currCourse = courses[courseNumber];
  102|      1|  currCourse->removeStudent(studentID);
  103|      1|  return true;
  104|      1|}
  105|       |
  106|       |// Return true if student is in the given course
  107|      1|bool University::isInCourse(int studentID, const string &courseNumber) {
  108|      1|  if ((students.find(studentID) == students.end()) ||
  109|      1|      (courses.find(courseNumber) == courses.end())) {
  110|      0|    return false;
  111|      0|  }
  112|      1|  Student *currStudent = students[studentID];
  113|      1|  return currStudent->isInCourse(courseNumber);
  114|      1|}
  115|       |
  116|       |// Return the courses student is enrolled in
  117|       |// The returned courses are separated by commas and sorted by course name
  118|      1|string University::getEnrolledCourses(const int &studentID) {
  119|      1|  if (students.find(studentID) == students.end()) {
  120|      0|    return "";
  121|      0|  }
  122|      1|  Student *student = students[studentID];
  123|      1|  return student->getEnrolledCourses();
  124|      1|}
  125|       |
  126|       |// Return class list sorted by last name of students
  127|      1|string University::getClassListByLastName(const string &courseNumber) {
  128|      1|  return courses[courseNumber]->getClassListByLastName();
  129|      1|}
  130|       |
  131|       |// Return class list sorted by id of students
  132|      1|string University::getClassListByID(const string &courseNumber) {
  133|      1|  return courses[courseNumber]->getClassListByID();
  134|      1|}
  135|       |
  136|       |// Return the title for the course
  137|      1|string University::getCourseTitle(string const &courseNumber) {
  138|      1|  if (courses.find(courseNumber) == courses.end()) {
  139|      0|    return "";
  140|      0|  }
  141|      1|  Course *currCourse = courses[courseNumber];
  142|      1|  return currCourse->name;
  143|      1|}
  144|       |
  145|       |// Returns university name
  146|      1|string University::getUniversityName() const { return name; }

Mon Mar 13 03:23:11 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
